/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };
    };

    behaviors {
        ss_hs_modmorph: ss_hs_modmorph {
            compatible = "zmk,behavior-mod-morph";
            label = "SS_HS_MODMORPH";
            bindings = <&kp M>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        kh_hs_tapdance: kh_hs_tapdance {
            compatible = "zmk,behavior-tap-dance";
            label = "KH_HS_TAPDANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;
        };

        hrm: hrm {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {


            bindings = <
                &kp ESC      &kp Q   &kp W   &kp E   &kp R      &kp T                           &kp Y   &kp U       &kp I       &kp O     &kp P       &kp BSPC
                &kp TAB      &kp A   &kp S   &kp D   &kp F      &kp G                           &kp H   &kp J       &kp K       &kp L     &kp SEMI    &kp QUOT
                &kp LSHIFT   &kp Z   &kp X   &kp C   &kp V      &kp B                           &kp N   &kp M       &kp COMMA   &kp DOT   &kp SLASH   &kp RSHFT
                                                                &kp LCMD   &mo 2   &kp SPACE   &kp ENTER   &mo 1   &kp RCTRL
            >;
        };

        Nav {
            

            bindings = <
                &kp LCTRL        &kp LS(N1)   &kp LS(N2)   &kp LS(N3)   &kp LS(N4)   &kp LS(N5)                            &mo 3    &none      &kp UP     &none       &none   &kp BSPC
                &kp LALT         &kp LS(N6)   &kp LS(N7)   &kp LS(N8)   &kp LS(N9)   &kp LS(N0)                            &none    &kp LEFT   &kp DOWN   &kp RIGHT   &none   &none
                &kp LSHIFT       &none        &none        &none        &none        &none                                 &none    &none      &none      &none       &none   &kp RSHFT
                                                                &kp LCMD     &kp LCMD     &kp SPACE   &kp ENTER    &trans   &kp RCTRL
            >;
        };

        Num {


            bindings = <
                &kp LALT        &kp N1      &kp N2      &kp N3      &kp N4      &kp N5                      &kp N6          &kp N7          &kp N8        &kp N9         &kp N0         &kp BSPC
                &kp LG(SPACE)   &kp LG(A)   &kp LG(S)   &kp LG(D)   &kp LG(F)   &kp LG(G)                   &kp MINUS       &kp EQUAL       &kp LBKT      &kp RBKT       &kp BSLH       &kp GRAVE 
                &kp LSHIFT      &kp LG(Z)   &kp LG(X)   &kp LG(C)   &kp LG(V)   &kp LG(B)                   &kp LS(MINUS)   &kp LS(EQUAL)   &kp LS(LBKT)  &kp LS(RBKT)   &kp LS(BSLH)   &kp TILDE
                                                                 &kp LCMD    &trans      &none   &none   &none           &none
            >;
        };

        Media {
            bindings = <
                &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4       &none                          &trans   &none   &none   &none   &none   &none
                &none          &none          &none          &none          &kp C_VOL_DN       &kp C_VOL_UP                   &none    &none   &none   &none   &none   &none
                &bt BT_CLR     &none          &none          &kp C_PREV     &kp C_PLAY_PAUSE   &kp C_NEXT                     &none    &none   &none   &none   &none   &none
                                                                            &none              &none          &none   &none   &trans   &none
            >;
        };
    };
};
